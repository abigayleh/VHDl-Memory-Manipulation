library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity controller_axi_master is
  port(ACLK, ARESETn: in std_logic;
        -- User control signals
	    op_a, op_b: in std_logic_vector(3 downto 0);
        start: in std_logic; -- start multiplication of op_a * op_b
	    data_out: out std_logic_vector(31 downto 0);
		 done: buffer std_logic); -- product to 7-segment displays
		 
end controller_axi_master;

architecture t of controller_axi_master is

component axi_lite_fpmul is
  port( ACLK, ARESETn: in std_logic;
        -- Write Address Channel from master
        AWVALID: in std_logic;
        AWREADY: buffer std_logic;
        AWADDR: in std_logic_vector(31 downto 0);
        AWPROT: in std_logic_vector(2 downto 0);
        -- Write Data Channel from master
        WVALID: in std_logic;
        WREADY: buffer std_logic;
        WDATA: in std_logic_vector(31 downto 0);
        WSTRB: in std_logic_vector(3 downto 0);
        -- Write Response Channel to master
        BVALID: buffer std_logic;
        BREADY: in std_logic;
        BRESP: buffer std_logic_vector(1 downto 0);
        -- Read Address Channel from master
        ARVALID: in std_logic;
        ARREADY: buffer std_logic;
        ARADDR: in std_logic_vector(31 downto 0);
        ARPROT: in std_logic_vector(2 downto 0);
        -- Read Data Channel to master
        RVALID: buffer std_logic;
        RREADY: in std_logic;
        RDATA: buffer std_logic_vector(31 downto 0);
        RRESP: buffer std_logic_vector(1 downto 0));
end component;

component mem_a
	PORT
	( address: IN STD_LOGIC_VECTOR (3 DOWNTO 0);
		clock	: IN STD_LOGIC;
		q	: OUT STD_LOGIC_VECTOR (31 DOWNTO 0));
end component;

component mem_b
	PORT
	(  address: IN STD_LOGIC_VECTOR (3 DOWNTO 0);
		clock	: IN STD_LOGIC;
		q: OUT STD_LOGIC_VECTOR (31 DOWNTO 0));
end component;

signal addressA: std_logic_vector(31 downto 0) := "00000000000000000000000000000000";
signal addressB: std_logic_vector(31 downto 0) := "00000000000000000000000000000001";
signal addressP: std_logic_vector(31 downto 0) := "00000000000000000000000000000011";

signal A: std_logic_vector(31 downto 0);
signal B: std_logic_vector(31 downto 0);

signal AWVALID: std_logic;
signal AWADDR: std_logic_vector(31 downto 0);
signal AWPROT: std_logic_vector(2 downto 0) := "000";
signal WVALID: std_logic;
signal WDATA: std_logic_vector(31 downto 0);
signal WSTRB: std_logic_vector(3 downto 0) := "1111";
signal BREADY: std_logic;
signal ARVALID: std_logic;
signal ARADDR: std_logic_vector(31 downto 0);
signal ARPROT: std_logic_vector(2 downto 0) := "000";
signal RREADY: std_logic;

signal AWREADY: std_logic;
signal WREADY: std_logic;
signal BVALID: std_logic;
signal BRESP: std_logic_vector(1 downto 0);
signal ARREADY: std_logic;
signal RVALID: std_logic;
signal RDATA: std_logic_vector(31 downto 0);
signal RRESP: std_logic_vector(1 downto 0);

signal count: unsigned(4 downto 0):= "00000";

begin

slave: axi_lite_fpmul port map (aclk, aresetn, AWVALID, AWREADY, AWADDR, AWPROT, WVALID, WREADY, WDATA, 
WSTRB, BVALID, BREADY, BRESP, ARVALID, ARREADY, ARADDR, ARPROT, RVALID, RREADY, RDATA, RRESP);

mem_a_inst : mem_a PORT MAP (
		address	 => op_a,
		clock	 => ACLK, 
		q	 => A);
	
mem_b_inst : mem_b PORT MAP (
		address	 => op_b,
		clock	 => ACLK,
		q	 => B);
			
main: process (aclk)

begin
if(rising_edge(aclk)) then
	
	count <= count + 1;
	if(start = '1') then
		--Write A data
		AWVALID <= '0';
		count <= "00000";
	
	elsif(count	= "00010") then 
		AWADDR <= addressA;
		AWVALID <= '1';
		
	elsif(count	= "00100") then
		WVALID <= '0';
		
	elsif(count	= "00110") then
		WDATA <= A;
		WVALID <= '1';	
	elsif(count	= "00111") then
		BREADY <= '0';
	elsif(count = "01001") then
		BREADY <= '1';

	elsif(count = "01010") then

		AWVALID <= '0';
	
	elsif (count	= "01011") then
		AWADDR <= addressB;
		AWVALID <= '1';
		
	elsif(count <= "01100") then

		WVALID <= '0';
	
	elsif(count	= "01110") then
		WDATA <= B;
		WVALID <= '1';
	
	elsif (count = "01111") then
		BREADY <= '0';
	
	elsif(count = "10001") then
		BREADY <= '1';
	
		ARVALID <= '0';
	
	elsif (count = "10011") then
		ARADDR <= addressP;
		ARVALID <= '1';
		
	elsif(count = "10100") then
	
		RREADY <= '0';
		data_out <= RDATA;
		
	elsif(count = "10110") then
		RREADY <= '1';
		done <= '1';

	end if;
end if;
	
end process;

end t;